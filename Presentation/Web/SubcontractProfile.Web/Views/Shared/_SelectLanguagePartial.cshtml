@using Microsoft.AspNetCore.Builder
@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.Localization
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.Options

@inject IViewLocalizer Localizer
@inject IOptions<RequestLocalizationOptions> LocOptions

@{
    var requestCulture = Context.Features.Get<IRequestCultureFeature>();
    var cultureItems = LocOptions.Value.SupportedUICultures
        .Select(c => new SelectListItem { Value = c.Name, Text = c.DisplayName })
        .ToList();
    var controllerName = ViewContext.RouteData.Values["Controller"];
    var strView = ViewContext.RouteData.Values["action"].ToString();
    var returnUrl = string.IsNullOrEmpty(Context.Request.Path) ? "~/" : $"~{Context.Request.Path.Value}";
}
    <div title="@Localizer["Request culture provider:"] @requestCulture?.Provider?.GetType().Name">


        <form id="selectLanguage" action="@Url.Action("SetLanguage",controllerName)" method="post">
            @Html.Hidden("returnUrl", Url.Action(strView, controllerName))
            <label asp-for="@requestCulture.RequestCulture.UICulture.Name">@Localizer["Language:"]</label>
            <select name="culture" class="form-control"
                    onchange="this.form.submit();"
                    asp-for="@requestCulture.RequestCulture.UICulture.Name" asp-items="cultureItems">
                <option value="">Select</option>
                <option value="th">TH</option>
                <option value="en">EN</option>
            </select>
        </form>
    </div>
